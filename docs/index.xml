<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yonh&#39;s Blog</title>
    <link>https://yonh.github.io/docs/</link>
    <description>Recent content on Yonh&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Oct 2018 16:01:05 +0000</lastBuildDate>
    
	<atom:link href="https://yonh.github.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用Karabiner将其他键盘配置为类似HHKB的布局</title>
      <link>https://yonh.github.io/docs/posts/set-keyboard-to-hhkb-style/</link>
      <pubDate>Sun, 21 Oct 2018 16:01:05 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/set-keyboard-to-hhkb-style/</guid>
      <description>使用Karabiner将其他键盘配置为类似HHKB的布局 背景说明 配置键盘： Niz 84键无线蓝牙静电容键盘
事实上的配置应该是HHKB lite的布局，因为非lite版的HHKB键盘左下角都没有fn键
但是我用惯了fn在左下角的方式，因此我会把HHKB的left_opt替换为fn,其他键盘类似。
下载Karabiner-Elements, 官方文档
 任务
 caps_lock to fn ~ to Esc , Home to ~ HHKB Arrow Mode (fn + semicolon/slash/open_bracket/quote to arrow keys, etc)  问题
 fn + control + 上下左右不能切换屏幕  学习到的知识
 在哪里保存karabiner映射规则脚本 映射规则基本语法  解决方案
 optional添加control   视频 
规则脚本放在~/.config/karabiner/assets/complex_modifications
{ &amp;quot;title&amp;quot;: &amp;quot;Happy Hacking Keyboard Compatible Mode (rev 2)&amp;quot;, &amp;quot;rules&amp;quot;: [ { &amp;quot;description&amp;quot;: &amp;quot;HHKB Arrow Mode (fn + semicolon/slash/open_bracket/quote to arrow keys, etc)&amp;quot;, &amp;quot;manipulators&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;semicolon&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;option&amp;quot;, &amp;quot;command&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;shift&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;left_arrow&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;slash&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;option&amp;quot;, &amp;quot;command&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;shift&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;down_arrow&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;open_bracket&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;option&amp;quot;, &amp;quot;command&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;shift&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;up_arrow&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;quote&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;option&amp;quot;, &amp;quot;command&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;shift&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;right_arrow&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;l&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;option&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;page_up&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;period&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot;, &amp;quot;control&amp;quot;, &amp;quot;option&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;page_down&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;k&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;home&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;comma&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;caps_lock&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;key_code&amp;quot;: &amp;quot;end&amp;quot; } ] } ] }, { &amp;quot;description&amp;quot;: &amp;quot;HHKB Media Key Mode (fn + asdf to Volume down/up/mute, eject) (rev 2)&amp;quot;, &amp;quot;manipulators&amp;quot;: [ { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;a&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;any&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;consumer_key_code&amp;quot;: &amp;quot;volume_decrement&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;s&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;any&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;consumer_key_code&amp;quot;: &amp;quot;volume_increment&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;d&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;any&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;consumer_key_code&amp;quot;: &amp;quot;mute&amp;quot; } ] }, { &amp;quot;type&amp;quot;: &amp;quot;basic&amp;quot;, &amp;quot;from&amp;quot;: { &amp;quot;key_code&amp;quot;: &amp;quot;f&amp;quot;, &amp;quot;modifiers&amp;quot;: { &amp;quot;mandatory&amp;quot;: [ &amp;quot;fn&amp;quot; ], &amp;quot;optional&amp;quot;: [ &amp;quot;any&amp;quot; ] } }, &amp;quot;to&amp;quot;: [ { &amp;quot;consumer_key_code&amp;quot;: &amp;quot;eject&amp;quot; } ] } ] }, { &amp;quot;description&amp;quot;: &amp;quot;Map fn + i, o, p to F13, F14, F15.</description>
    </item>
    
    <item>
      <title>配置Rime输入法</title>
      <link>https://yonh.github.io/docs/posts/rime-config/</link>
      <pubDate>Tue, 16 Oct 2018 06:31:42 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/rime-config/</guid>
      <description>环境 Ubuntu 18.04
目标  配置rime输入法，添加双拼方案  配置 # 安装rime和双拼方案 sudo apt install -y fcitx-rime librime-data-double-pinyin # 创建配置文件 `~/.config/fcitx/rime/default.custom.yaml`并配置。 echo &amp;quot;\ # default.custom.yaml # save it to: # ~/.config/ibus/rime (linux ibus) # ~/.config/fcitx/rime (linux fcitx) # ~/Library/Rime (macos) # %APPDATA%\Rime (windows) patch: schema_list: - schema: luna_pinyin # 朙月拼音 - schema: luna_pinyin_simp # 朙月拼音 简化字模式 - schema: luna_pinyin_tw # 朙月拼音 臺灣正體模式 - schema: terra_pinyin # 地球拼音 dì qiú pīn yīn - schema: bopomofo # 注音 - schema: jyutping # 粵拼 - schema: cangjie5 # 倉頡五代 - schema: cangjie5_express # 倉頡 快打模式 - schema: quick5 # 速成 - schema: wubi86 # 五笔 86 - schema: wubi_pinyin # 五笔拼音混合輸入 - schema: double_pinyin # 自然碼雙拼 - schema: double_pinyin_mspy # 微軟雙拼 - schema: double_pinyin_abc # 智能 ABC 雙拼 - schema: double_pinyin_flypy # 小鶴雙拼 - schema: wugniu # 吳語上海話（新派） - schema: wugniu_lopha # 吳語上海話（老派） - schema: sampheng # 中古漢語三拼 - schema: zyenpheng # 中古漢語全拼 - schema: ipa_xsampa # X-SAMPA 國際音標 - schema: emoji # emoji 表情 &amp;quot; &amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>When you&#39;re gone chords</title>
      <link>https://yonh.github.io/docs/chords/when_youre_gone_chords/</link>
      <pubDate>Sat, 06 Oct 2018 16:43:14 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/chords/when_youre_gone_chords/</guid>
      <description>from wheresbada
When You&#39;re Gone By The Cranberries NOTE: Capo in 3rd fret [Chords used] C Am Em G F e|-0---0---0---3---1| B|-1---1---0---0---1| G|-0---2---0---0---0| D|-2---2---2---0---2| A|-3-------2---2---3| E|---------0---3----| [Intro] C Am Em G Hold on to love that is what I do, now that I&#39;ve found you C Am Em G And from above everything&#39;s stinking, they&#39;re not around you C Am And in the night I could be helpless Em G I could be lonely, sleeping without you C Am And in the day everything&#39;s complex Em G There&#39;s nothing simple when I&#39;m not around you [Chorus] C Am But I miss you when you&#39;re gone Em F That is what I do, babe, babe, babe C Am And it&#39;s going to carry on Em F That is what I knew, babe, babe, babe [Bridge] C|Am|Em|G [Verse] C Am Em G Hold on to my hands I feel I&#39;m sinking, sinking without you C Am Em G And to my mind everything&#39;s stinking, stinking without you C Am And in the night I could be helpless Em G I could be lonely, sleeping without you C Am And in the day everything&#39;s complex Em G There&#39;s nothing simple when I&#39;m not around you [Chorus] C Am And I miss you when you&#39;re gone Em F That is what I do, babe, babe, babe C Am And it&#39;s going to carry on Em F That is what I knew, babe, babe, babe [Bridge] x2 C|Am|Em|F| babe, babe, babe [Outro] C|Am|Em|F| (Fade out)  </description>
    </item>
    
    <item>
      <title>Lisp解释器的代码分析过程记录</title>
      <link>https://yonh.github.io/docs/posts/lisp-interpreter/</link>
      <pubDate>Fri, 01 Jul 2016 00:54:25 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/lisp-interpreter/</guid>
      <description>说明 由于文章不是同一时间写的，而是不断的往上加内容，而且我觉得这样完整的记录我的整个分析记录是非常不错的方式，对于我的混乱写作感到抱歉请见谅，我只是遵循着心中的言语而作的记录
五一期间，打算给自己整天的时间好好看看《实用Common Lisp编程》，却是意外的发现了篇非常棒的lisp入门文章-过河卒的（记得以前我是看过了，但是当时不知道是觉得难还是其他什么原因，没继续看），里面从基础直到讲解编写一个lisp解释器的实现（文章是这么说的），已经忘了怎么能找到的了，回想起来，将其称之为缘分吧，我无法解释这些我喜欢的东西能这么有幸与我相遇(不仅仅是编程)，也是我为什么需要写文的原因，因为我会忘了一切，几乎就没记住过很多东西，我讨厌让我的脑子很累(我非常刻意的逃避一些东西,请原谅我的记性，因为我不会记得我不感兴趣的东西，因为那太累了[借口？我想是的])
回到这篇文章，看它来入门真的非常不错，我看到讲到Lisp世界七个公理的部分，我搜索了下&amp;rdquo;Lisp七个公理&amp;rdquo;, 有幸找到了维基教科书里面的Lisp入门，这网站非常好，能够生成电子书以下载，
网站地址在此: Lisp 入門 将其10章看完，感觉我之前看到《实用Common Lisp编程》实在不该（这个入门比较简单，能比较好的理解lisp一些基本知识），对比这3篇我看过的入门文章，我不想去说哪个好，我本身没什么本事，没那个资格评判它们(当然，我是认为该尊重自己内心的想法就好[它既不正确也不错误]，它是怎么就怎么),它们给了我不同的视角去了解lisp,让我发现，哦，原来入门文章可以这么写(今天刚看了个视频，讲的是有名的IT词汇的解释，里面讲课的方式就非常棒，事先弄出一个画面，然后拿着各种接下来的操作的纸条，场景来继续下面的讲课，非常生动) 下面是过河卒的lisp入门文章链接 http://www.cnblogs.com/suiqirui19872005/archive/2007/12/05/984517.html 当然这个解释器可能是出自这里的 http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html
文章基本看完了，剩下下面的lisp解释器实现实在是看不懂，于是将我的下班空闲时间都用来研究它了，以下是笔记
2014-05-06 00:52:12
需要注意的是，文章后面2章顺序颠倒了，而且函数pair实现最后一行(pair (cdr) (cdr y))))))应改为(pair (cdr x) (cdr y)))))),具体的eval，assoc函数应该改个名字，我不知道common lisp标准里面有没有它们(应该是有吧,没去研究),反正我是提示了已存在函数声明，所以我改成了加个2的名字
-————完整程序 迷糊的摘录了(拷贝的)，学习中修正错误&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
(defun assoc2 (x y) (cond ((eq (caar y) x) (cadar y)) (t (assoc x (cdr y))))) &amp;gt; (assoc2 &#39;a &#39;((a 1) (b 2))) 1 (defun pair (x y) (cond ((and (null x) (null y)) &#39;()) ((and (not (atom x)) (not (atom y))) (cons (list (car x) (car y)) (pair (cdr x) (cdr y)))))) &amp;gt; (pair &#39;(1 2) &#39;(A B)) ((1 A) (2 B)) (defun eval2 (e a) (cond ((atom e) (assoc2 e a)) ;第一段 ((atom (car e)) ;第二段 (cond ((eq (car e) &#39;quote) (cadr e)) ((eq (car e) &#39;atom) (atom (eval2 (cadr e) a))) ((eq (car e) &#39;eq) (eq (eval2 (cadr e) a) (eval2 (caddr e) a))) ((eq (car e) &#39;car) (car (eval2 (cadr e) a))) ((eq (car e) &#39;cdr) (cdr (eval2 (cadr e) a))) ((eq (car e) &#39;cons) (cons (eval2 (cadr e) a) (eval2 (caddr e) a))) ((eq (car e) &#39;cond) (evcon (cdr e) a)) (&#39;t (eval (cons (assoc2 (car e) a) (cdr e)) a)))) ;第二段结束 ((eq (caar e) &#39;label) (eval (cons (caddar e) (cdr e)) (cons (list (cadar e) (car e)) a))) ((eq (caar e) &#39;lambda) (eval (caddar e) (append (pair (cadar e) (evlis (cdr e) a)) a))))) (defun evcon (c a) (cond ((eval2 (caar c) a) (eval2 (cadar c) a)) (&#39;t (evcon (cdr c) a)))) (defun evlis (m a) (cond ((null m) &#39;()) (&#39;t (cons (eval2 (car m) a) (evlis (cdr m) a)))))  ; 基本知识 ; 1，lisp七个基本操作符，caar，cadr等函数的理解， -------------------我写的程序---------------- ; 依赖函数 (defun assoc2 (x y) (cond ((eq (caar y) x) (cadar y)) (t (assoc2 x (cdr y))))) &amp;gt;(assoc2 &#39;a &#39;((a x) (b y))) x  第一段</description>
    </item>
    
    <item>
      <title>关于浮点数的二进制表示的思考</title>
      <link>https://yonh.github.io/docs/posts/about-binary/</link>
      <pubDate>Tue, 28 Jun 2016 10:11:58 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/about-binary/</guid>
      <description>科学计数法 在谈论浮点数表示形式之前，我们先看看，如何用科学计数法表示一个实数, 如
$123 = 1.23 * 10^2$
$45.6=4.56 * 10^1$
$-0.789 = -7.89 * 10^{-1}$
这里我们可以找出下列数据
   数字 尾数 指数 符号     123 23 2 正   45.6 56 1 正   -78.9 789 -1 负    浮点数各位的大小 相比整数，浮点数的二进制表示稍显复杂,根据IEEE-754标准规定，浮点数表示分3部分
符号，指数和尾数，之所以开始提到科学计数法，原因就在此，浮点数的表示就是基于科学计数法的形式存储
其占位数(2进制位)分别如下
   类型 符号(S) 指数(E) 尾数(M)     单精度 (float) 1 8 23   双精度 (double) 1 11 52    那么我们可以看到，单精度和双精度的数字在内存中的表示如下 (S符号位 E指数 M尾数)</description>
    </item>
    
    <item>
      <title>vim的简单配置</title>
      <link>https://yonh.github.io/docs/posts/vim-config/</link>
      <pubDate>Sat, 04 Jun 2016 17:04:13 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/vim-config/</guid>
      <description>说明 我对vi的使用上没什么挑剔的,毕竟多数是在写小程序上使用的 默认的vi其实也够用了不过还是为了增加使用vi时的编码效率还是弄些插件,改改默认配置,在此做个记录
syntax on &amp;quot; 语法高亮 set autoindent &amp;quot; 自动对齐,把当前行的对起格式应用到下一行 set smartindent &amp;quot; 智能的选择对起方式 set smartindent &amp;quot; 开启新行时使用智能自动缩进 set tabstop=4 &amp;quot; 设置tab键为4个空格, 默认8, set shiftwidth=4&amp;quot; 将换行自动缩进设置成4个空格 set cursorline &amp;quot; 横线指示当前行 set ruler &amp;quot; 打开状态栏标尺 set incsearch &amp;quot; 输入搜索内容时就显示搜索结果 set hlsearch &amp;quot; 搜索时高亮显示被找到的文本 set showmatch &amp;quot; 插入括号时，短暂地跳转到匹配的对应括号 set laststatus=2 &amp;quot;显示状态栏 (默认值为 1, 无法显示状态栏) set cmdheight=1 &amp;quot; 显示状态栏 (默认值为 1, 无法显示状态栏) &amp;quot; 设置在状态行显示的信息 set statusline=\ %&amp;lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&amp;amp;fileformat}\ %{&amp;amp;encoding}\ %c:%l/%L%) &amp;quot;普通状态下输入f即可打印出function定义 nnoremap f ofunction () {&amp;lt;ENTER&amp;gt;&amp;lt;ESC&amp;gt;i}&amp;lt;ESC&amp;gt;kwi &amp;quot; 这样分号键就可以进入命令行模式 nnoremap ; : inoremap ( ()&amp;lt;ESC&amp;gt;i inoremap [ []&amp;lt;ESC&amp;gt;i inoremap &amp;quot; &amp;quot;&amp;quot;&amp;lt;ESC&amp;gt;i inoremap { {}&amp;lt;ESC&amp;gt;i &amp;quot;输入(&amp;quot;时补全&amp;quot;); inoremap (&amp;quot; (&amp;quot;&amp;quot;);&amp;lt;ESC&amp;gt;hhi inoremap then thenend&amp;lt;ESC&amp;gt;hhi&amp;lt;ENTER&amp;gt;&amp;lt;BACKSPACE&amp;gt;&amp;lt;ESC&amp;gt;ko  添加颜色主题 关于颜色主题这个不影响使用,但是在实际在linux上使用发现蓝色比较难看清,索性就找找颜色主题替换算了 vim的颜色主题很好修改,在配置文件里面添加 colorscheme 主题名称 就行了 至于主题可以到vim官网或github找 http://www.</description>
    </item>
    
    <item>
      <title>王爽-汇编语言学习感想</title>
      <link>https://yonh.github.io/docs/posts/about-asm/</link>
      <pubDate>Sun, 29 May 2016 23:08:52 +0000</pubDate>
      
      <guid>https://yonh.github.io/docs/posts/about-asm/</guid>
      <description>不知道什么时候开始,我有个习惯,就是在书上标注购买时间,这样我会知道我的每一本书的购买日期,当我再次拿起书本时,我知道,原来它已经陪伴了我这么久,但我却不懂得珍惜,以致于现在我还没看完.
我购买的王爽的汇编语言是11年12月11日,距今差不多5年了,然而我还是没能看完这本最简单的汇编入门书,而时光一晃,几年过去了,我却什么也没学到,最大原因还是自身的浮躁.
一开始我就有着许多不切实际的幻想,写操作系统,写游戏,写编译器等,也买上了许多书,认为我应该学习这个,应该学习那个,但最后都半途而废了,浪费了太多时间.
从3月份开始,我开始重新对本书的学习,花了2个月的时间,我把书中几乎所有的程序都实现了一遍,当然也有疑惑,只是我不大想深究,我最终的目的是想对C,汇编,操作系统有个全局的了解,然后写一个极小的操作系统,之后再干嘛我已经不想计划了,单单这个过程我想至少会消耗我1年甚至更长的时间,我能不能坚持下来已经是个问题,我不能再给自己太多的选择了,因为我看到了我4年多的时间是如何浪费的.
最后,摘录一些其他领域我摘录下来的语句送给自己以及正在阅读这篇文章的朋友,我相信,知识在一定程度内是相通的
 复利原理就是普世大道
 不要执迷于某个数字的多少次方后边的结果，那只是点燃内心欲望，让人自迷的表象
 复利原理，要表达的意思是：复利周期内看似不起眼的小进步或者小退步，假以时日，则会让本体产生超乎想象的巨大进步或者退步
 不要高估你一年能做成的事, 也不要低估你五年能做成的事
  </description>
    </item>
    
  </channel>
</rss>